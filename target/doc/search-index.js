var N = null;var searchIndex = {};
searchIndex["ringbuf"]={"doc":"Lock-free single-producer single-consumer ring buffer","items":[[3,"RingBuffer","ringbuf","Ring buffer itself.",N,N],[3,"Producer","","Producer part of ring buffer.",N,N],[3,"Consumer","","Consumer part of ring buffer.",N,N],[4,"PushAccessError","","",N,N],[13,"Full","","Cannot push: ring buffer is full.",0,N],[13,"BadLen","","User function returned invalid length.",0,N],[4,"PopAccessError","","",N,N],[13,"Empty","","Cannot pop: ring buffer is empty.",1,N],[13,"BadLen","","User function returned invalid length.",1,N],[4,"PushError","","",N,N],[13,"Full","","Cannot push: ring buffer is full.",2,N],[4,"PopError","","",N,N],[13,"Empty","","Cannot pop: ring buffer is empty.",3,N],[8,"ReadFrom","","Something that can read from `Read` instance.",N,N],[10,"read_from","","Read from `Read` instance.",4,[[["self"],["read"]],["result",["usize"]]]],[8,"WriteInto","","Something that can write into `Write` instance.",N,N],[10,"write_into","","Write into `Write` instance.",5,[[["self"],["write"]],["result",["usize"]]]],[11,"new","","Creates new instance of a ring buffer.",6,[[["usize"]],["self"]]],[11,"split","","Splits ring buffer into producer and consumer.",6,N],[11,"capacity","","Returns capacity of a ring buffer.",6,[[["self"]],["usize"]]],[11,"is_empty","","Checks if the ring buffer is empty.",6,[[["self"]],["bool"]]],[11,"is_full","","Checks if the ring buffer is full.",6,[[["self"]],["bool"]]],[11,"capacity","","Returns capacity of the ring buffer.",7,[[["self"]],["usize"]]],[11,"is_empty","","Checks if the ring buffer is empty.",7,[[["self"]],["bool"]]],[11,"is_full","","Checks if the ring buffer is full.",7,[[["self"]],["bool"]]],[11,"push","","Pushes element into ring buffer.",7,[[["self"],["t"]],["result"]]],[11,"push_slice","","Pushes elements from slice into ring buffer. Elements should be be cloneable.",7,N],[11,"push_access","","Allows to write into ring buffer memory directry.",7,[[["self"],["f"]],["result",["result","pushaccesserror"]]]],[11,"capacity","","Returns capacity of the ring buffer.",8,[[["self"]],["usize"]]],[11,"is_empty","","Checks if the ring buffer is empty.",8,[[["self"]],["bool"]]],[11,"is_full","","Checks if the ring buffer is full.",8,[[["self"]],["bool"]]],[11,"pop","","Retrieves element from ring buffer.",8,[[["self"]],["result",["poperror"]]]],[11,"pop_slice","","Retrieves elements from ring buffer into slice. Elements should be cloneable.",8,N],[11,"pop_access","","Allows to read from ring buffer memory directry.",8,[[["self"],["f"]],["result",["result","popaccesserror"]]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"read_from","","",7,[[["self"],["read"]],["result",["usize"]]]],[11,"write_into","","",8,[[["self"],["write"]],["result",["usize"]]]],[11,"drop","","",6,[[["self"]]]],[11,"eq","","",0,[[["self"],["pushaccesserror"]],["bool"]]],[11,"eq","","",1,[[["self"],["popaccesserror"]],["bool"]]],[11,"eq","","",2,[[["self"],["pusherror"]],["bool"]]],[11,"eq","","",3,[[["self"],["poperror"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"write","","",7,N],[11,"flush","","",7,[[["self"]],["result"]]],[11,"read","","",8,N]],"paths":[[4,"PushAccessError"],[4,"PopAccessError"],[4,"PushError"],[4,"PopError"],[8,"ReadFrom"],[8,"WriteInto"],[3,"RingBuffer"],[3,"Producer"],[3,"Consumer"]]};
initSearch(searchIndex);
