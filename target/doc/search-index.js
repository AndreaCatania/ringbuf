var N = null;var searchIndex = {};
searchIndex["ringbuf"]={"doc":"Lock-free single-producer single-consumer (SPSC) FIFO ring buffer with direct access to inner data.","items":[[3,"RingBuffer","ringbuf","Ring buffer itself.",N,N],[3,"Producer","","Producer part of ring buffer.",N,N],[3,"Consumer","","Consumer part of ring buffer.",N,N],[4,"PushError","","`Producer::push` error.",N,N],[13,"Full","","Cannot push: ring buffer is full.",0,N],[4,"PopError","","`Consumer::pop` error.",N,N],[13,"Empty","","Cannot pop: ring buffer is empty.",1,N],[4,"PushSliceError","","`Producer::push_slice` error.",N,N],[13,"Full","","Cannot push: ring buffer is full.",2,N],[4,"PopSliceError","","`Consumer::pop_slice` error.",N,N],[13,"Empty","","Cannot pop: ring buffer is empty.",3,N],[4,"MoveSliceError","","`{Producer, Consumer}::move_slice` error.",N,N],[13,"Empty","","Cannot pop: ring buffer is empty.",4,N],[13,"Full","","Cannot push: ring buffer is full.",4,N],[4,"PushAccessError","","`Producer::push_access` error.",N,N],[13,"Full","","Cannot push: ring buffer is full.",5,N],[13,"BadLen","","User function returned invalid length.",5,N],[4,"PopAccessError","","`Consumer::pop_access` error.",N,N],[13,"Empty","","Cannot pop: ring buffer is empty.",6,N],[13,"BadLen","","User function returned invalid length.",6,N],[4,"ReadFromError","","`Producer::read_from` error.",N,N],[13,"Read","","Error returned by `Read`.",7,N],[13,"RbFull","","Ring buffer is full.",7,N],[4,"WriteIntoError","","`Consumer::write_into` error.",N,N],[13,"Write","","Error returned by `Write`.",8,N],[13,"RbEmpty","","Ring buffer is empty.",8,N],[11,"new","","Creates a new instance of a ring buffer.",9,[[["usize"]],["self"]]],[11,"split","","Splits ring buffer into producer and consumer.",9,N],[11,"capacity","","Returns capacity of the ring buffer.",9,[[["self"]],["usize"]]],[11,"is_empty","","Checks if the ring buffer is empty.",9,[[["self"]],["bool"]]],[11,"is_full","","Checks if the ring buffer is full.",9,[[["self"]],["bool"]]],[11,"capacity","","Returns capacity of the ring buffer.",10,[[["self"]],["usize"]]],[11,"is_empty","","Checks if the ring buffer is empty.",10,[[["self"]],["bool"]]],[11,"is_full","","Checks if the ring buffer is full.",10,[[["self"]],["bool"]]],[11,"push","","Appends an element to the ring buffer. On failure returns an error containing the element that hasn't beed appended.",10,[[["self"],["t"]],["result",["pusherror"]]]],[11,"push_slice","","Appends elements from slice to the ring buffer. Elements should be `Copy`.",10,N],[11,"move_slice","","Removes at most `count` elements from the `Consumer` of the ring buffer and appends them to the `Producer` of the another one. If `count` is `None` then as much as possible elements will be moved.",10,[[["self"],["consumer"],["option",["usize"]]],["result",["usize","movesliceerror"]]]],[11,"read_from","","Reads at most `count` bytes from `Read` instance and appends them to the ring buffer. If `count` is `None` then as much as possible bytes will be read.",10,[[["self"],["read"],["option",["usize"]]],["result",["usize","readfromerror"]]]],[11,"push_access","","Allows to write into ring buffer memory directry.",10,[[["self"],["f"]],["result",["result","pushaccesserror"]]]],[11,"capacity","","Returns capacity of the ring buffer.",11,[[["self"]],["usize"]]],[11,"is_empty","","Checks if the ring buffer is empty.",11,[[["self"]],["bool"]]],[11,"is_full","","Checks if the ring buffer is full.",11,[[["self"]],["bool"]]],[11,"pop","","Removes first element from the ring buffer and returns it.",11,[[["self"]],["result",["poperror"]]]],[11,"pop_slice","","Removes first elements from the ring buffer and writes them into a slice. Elements should be `Copy`.",11,N],[11,"move_slice","","Removes at most `count` elements from the `Consumer` of the ring buffer and appends them to the `Producer` of the another one. If `count` is `None` then as much as possible elements will be moved.",11,[[["self"],["producer"],["option",["usize"]]],["result",["usize","movesliceerror"]]]],[11,"write_into","","Removes at most first `count` bytes from the ring buffer and writes them into a `Write` instance. If `count` is `None` then as much as possible bytes will be written.",11,[[["self"],["write"],["option",["usize"]]],["result",["usize","writeintoerror"]]]],[11,"pop_access","","Allows to read from ring buffer memory directry.",11,[[["self"],["f"]],["result",["result","popaccesserror"]]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"drop","","",9,[[["self"]]]],[11,"eq","","",0,[[["self"],["pusherror"]],["bool"]]],[11,"ne","","",0,[[["self"],["pusherror"]],["bool"]]],[11,"eq","","",1,[[["self"],["poperror"]],["bool"]]],[11,"eq","","",2,[[["self"],["pushsliceerror"]],["bool"]]],[11,"eq","","",3,[[["self"],["popsliceerror"]],["bool"]]],[11,"eq","","",4,[[["self"],["movesliceerror"]],["bool"]]],[11,"eq","","",5,[[["self"],["pushaccesserror"]],["bool"]]],[11,"eq","","",6,[[["self"],["popaccesserror"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"write","","",10,N],[11,"flush","","",10,[[["self"]],["result"]]],[11,"read","","",11,N]],"paths":[[4,"PushError"],[4,"PopError"],[4,"PushSliceError"],[4,"PopSliceError"],[4,"MoveSliceError"],[4,"PushAccessError"],[4,"PopAccessError"],[4,"ReadFromError"],[4,"WriteIntoError"],[3,"RingBuffer"],[3,"Producer"],[3,"Consumer"]]};
initSearch(searchIndex);
